class Employee:
  

  def __init__(self, firstName, lastName, salary):
    self.firstName = firstName;
    self.lastName = lastName;
    self.salary = salary;
    #self.email = firstName + '.' + lastName + '@email.com';


  def __repr__(self):
    return "Employee('{}','{}', {})".format(self.firstName, self.lastName, self.salary)

  
  def __str__(self):
    return "{} {} and salary is {}".format(self.firstName, self.lastName, self.salary)

  
  def __add__(self, other):
    return self.salary + other.salary  

  @property
  def fullname(self):
    return "{} {}".format(self.firstName, self.lastName)
  
  @fullname.setter
  def fullname(self, fullName):
    first, last = fullName.split(" ")
    self.firstName = first
    self.lastName = last

  @property
  def email(self):
    return "{}.{}@email.com".format(self.firstName, self.lastName)

employee1 = Employee("Jack", "Reacher", 25)
employee2 = Employee("Ethan", "Hunt", 28)

#overloading using dunders
print(employee1 + employee2)

print(employee1)
print(employee1.email)
print(employee1.fullname)

#property decorators for making email function as property
employee1.firstName = "Jack 2"

print(employee1)
print(employee1.email)

#getters and setters
employee1.fullname = "Jhon kroski"
print(employee1.fullname)
print(employee1.email)
